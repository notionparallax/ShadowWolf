#!/bin/bash

read -r -d '' USAGE <<HERE
Usage: $0 <command> <target> [args]
Try '$0 help' for more info.
HERE
read -r -d '' HELP <<HERE
Usage: $0 <command> <target>

Commands:
  dev     Development commands like \`rails s\` and \`grunt server\`.
  prod    Production environment, currently only supports console.
  build   Build docker images.
  deploy  Push images to the BVN server and start them up.
  run     (No targets) Runs whatever commands are passed to it in the
          container.
  help    Print this text.

Targets:
  client  Angular frontend. Also starts the server.
  test    Runs protractor tests in phantomjs container.
  server  Rails backend. Also starts mongo.
  mongo   (Dev only) Mongodb service.
  console Rails console. Assumes mongo.

Run '$0 dev client' to get a full working environment.
HERE

run() {
  docker-compose -p shadowwolf run --rm $*
}
run-solo() {
  run --no-deps $*
}

SHARED_VOLUME=`pwd`:/ShadowWolf/
BASE_ARGS="-t -v $SHARED_VOLUME "
DEFAULT_ARGS="-d $BASE_ARGS "
case "$1" in
  dev)
    rm -f server/tmp/pids/server.pid
    case "$2" in
      test)
        case "$3" in
          beowulf)
            run-solo devflask python3 tests
            ;;
          oaf)
            [[ -n "$4" ]] \
              && TEST="tests/$4.rb" \
              || TEST="tests/all.rb"
            [[ "$4" = "remote" ]] && ENV_VARS="-e REMOTE_TEST=yes -e OPEN_ASSET_ENDPOINT=$OPEN_ASSET_ENDPOINT -e OPEN_ASSET_USERNAME=$OPEN_ASSET_USERNAME -e OPEN_ASSET_PASSWORD=$OPEN_ASSET_PASSWORD" 
             run-solo $ENV_VARS devoaf ruby $TEST
            ;;
        esac
        ;;
      client)
        docker-compose -p shadowwolf up -d devgrunt
        ;;
      server)
        rm -f server/tmp/pids/server.pid
        docker-compose -p shadowwolf up -d devrails
        ;;
      console)
        docker-compose -p shadowwolf run --rm devconsole
        ;;
      mongo)
        docker-compose -p shadowwolf up -d devmongo
        ;;
      factories)
        echo Adding 10 people and projects to database...
        echo '[:person,:project].each{|m|FactoryGirl.create_list(m,10)}' | docker-compose -p shadowwolf run --rm devconsole
        echo Done.
        ;;
      grunt-includes)
        docker-compose -p shadowwolf run --rm --no-deps devgrunt grunt includes
        ;;
      *)
        echo "$USAGE"
        ;;
    esac
    ;;
  build)
    case "$2" in
      dev)
        shift
        shift
        [[ -n "$*" ]] \
          && docker-compose -p shadowwolf build "$*" \
          || docker-compose -p shadowwolf build
        ;;
      client)
        docker-compose -p shadowwolf run --rm --no-deps devgrunt grunt build \
          && docker-compose -p shadowwolf build prodangular
        ;;
      server)
        docker-compose -p shadowwolf build prodrails
        ;;
      beowulf)
        docker-compose -p shadowwolf build prodflask
        ;;
      oaf)
        docker-compose -p shadowwolf build devoaf
        ;;
      *)
        echo "$USAGE"
        exit 1
        ;;
    esac
    ;;
  deploy)
    if [[ -z $BVN_SERVER ]]
    then
      read -p "BVN_SERVER is not defined for this environment, please enter the address for BVN_SERVER: " BVN_SERVER
    fi
    case "$2" in
      client)
        image=`docker images | egrep '^shadowwolf_prodangular' | grep latest | awk '{print $3}'`
        docker tag -f $image $BVN_SERVER:5000/shadowwolf-deploy-client
        docker push $BVN_SERVER:5000/shadowwolf-deploy-client
        remote_script="
        docker pull $BVN_SERVER:5000/shadowwolf-deploy-client > /dev/null;
        docker rm -f sw-client;
        docker run -d --name sw-client --link sw-oaf:oaf --link sw-beowulf:beowulf --link sw-server:server -p 9000:9000 -e SERVER_PORT_3000_TCP_ADDR=$BVN_SERVER $BVN_SERVER:5000/shadowwolf-deploy-client /run.sh;
        "
        ssh $USER@$BVN_SERVER $remote_script
        ;;
      server)
        image=`docker images | egrep '^shadowwolf_prodrails' | grep latest | awk '{print $3}'`
        docker tag -f $image $BVN_SERVER:5000/shadowwolf-deploy-server
        docker push $BVN_SERVER:5000/shadowwolf-deploy-server
        remote_script="
        docker pull $BVN_SERVER:5000/shadowwolf-deploy-server > /dev/null;
        docker rm -f sw-client ; docker rm -f sw-server;
        docker run -d --name sw-server --link sw-mongo:mongo -p 3000:3000 -w /home/app/server $BVN_SERVER:5000/shadowwolf-deploy-server passenger start -a 0.0.0.0 -p 3000 -e production;
        docker run -d --name sw-client --link sw-oaf:oaf --link sw-beowulf:beowulf --link sw-server:server -p 9000:9000 -e SERVER_PORT_3000_TCP_PORT=3000 -e SERVER_PORT_3000_TCP_ADDR=$BVN_SERVER $BVN_SERVER:5000/shadowwolf-deploy-client /run.sh;
        TZ='Australia/Sydney' nohup docker logs -f sw-server > /home/dave/logs/`date --iso-8601=minutes` &
        "
        ssh $USER@$BVN_SERVER $remote_script
        ;;
      beowulf)
        image=`docker images | egrep '^shadowwolf_prodflask' | grep latest | awk '{print $3}'`
        docker tag -f $image $BVN_SERVER:5000/shadowwolf-beowulf
        docker push $BVN_SERVER:5000/shadowwolf-beowulf
        remote_script="
        docker pull $BVN_SERVER:5000/shadowwolf-beowulf > /dev/null;
        docker rm -f sw-beowulf;
        docker run -d --name sw-beowulf
          -e MSSQL_SERVER=$MSSQL_SERVER
          -e MSSQL_UID=$MSSQL_UID
          -e MSSQL_PWD=$MSSQL_PWD
          -e MSSQL_DB=$MSSQL_DB
          -e PORT=9001
          -e debug=yes
          -p 9001:9001
          -w /beowulf
          $BVN_SERVER:5000/shadowwolf-beowulf
          python3 app/main.py;
        "
        ssh $USER@$BVN_SERVER $remote_script
        ;;
      oaf)
        image=`docker images | egrep '^shadowwolf_devoaf' | grep latest | awk '{print $3}'`
        docker tag -f $image $BVN_SERVER:5000/shadowwolf-oaf
        docker push $BVN_SERVER:5000/shadowwolf-oaf
        remote_script="
        docker pull $BVN_SERVER:5000/shadowwolf-oaf > /dev/null;
        docker rm -f sw-oaf;
        docker run -d --name sw-oaf
          --dns 10.22.140.50
          --dns 10.22.140.51
          -e OPEN_ASSET_USERNAME=$OPEN_ASSET_USERNAME
          -e OPEN_ASSET_PASSWORD=$OPEN_ASSET_PASSWORD
          -e OPEN_ASSET_ENDPOINT=$OPEN_ASSET_ENDPOINT
          -p 4567:4567
          -w /oaf
          $BVN_SERVER:5000/shadowwolf-oaf
          ./run.sh;
        "
        ssh $USER@$BVN_SERVER $remote_script
        ;;
    esac
    ;;
  prod)
    if [[ -z $BVN_SERVER ]]
    then
      read -p "BVN_SERVER is not defined for this environment, please enter the address for BVN_SERVER: " BVN_SERVER
    fi
    case "$2" in
      console)
        &>/dev/null ssh -t $USER@$BVN_SERVER "docker inspect mongo-ambassador"
        ambassador_present=$?
        [[ "$ambassador_present" = 1 ]] && $0 prod ambassador up
        docker-compose -p shadowwolf run prodconsole
        [[ "$ambassador_present" = 1 ]] && $0 prod ambassador down
      ;;
      ambassador)
        case "$3" in
          up)
            send_ambassador="docker run -d --link sw-mongo:mongo --name mongo-ambassador -p 27017:27017 svendowideit/ambassador"
            echo Sending ambassador to Mongo Land...
            &>/dev/null ssh -t $USER@$BVN_SERVER $send_ambassador
            ;;
          down)
            assasinate_ambassador="docker rm -f mongo-ambassador"
            echo -e Hiring hitmen... War with Mongo Land beginning in:$"\n"3
            sleep 1
            echo 2
            sleep 1
            echo 1
            &>/dev/null ssh -t $USER@$BVN_SERVER $assasinate_ambassador
            echo -n .; sleep 0.33; echo -n .; sleep 0.33; echo -n .; sleep 0.33; echo bang
            ;;
        esac
        ;;
    esac
    ;;
  run)
    shift
    COMMAND="bash"
    [[ -n "$*" ]] && COMMAND="$*"
    docker-compose -p shadowwolf run --rm devconsole $COMMAND
    ;;
  get-redis-dump)
    remote_script="
    sudo cp /var/lib/docker/aufs/mnt/\$(docker inspect -f '{{.Id}}' sw-oaf)/var/lib/redis/dump.rdb ~/.
    "
    ssh -t $USER@$BVN_SERVER $remote_script
    scp $USER@$BVN_SERVER:~/dump.rdb oaf/redis-dump.rdb
    ;;
  help)
    echo "$HELP"
    ;;
  *)
    echo "$USAGE"
    ;;
esac
# docker run --rm -it -v /home/dave/Projects/ShadowWolf/client:/ShadowWolf/client -w /ShadowWolf/client -e SERVER_PORT_3000_TCP_ADDR=10.22.140.67 -e SERVER_PORT_3000_TCP_PORT=3000 -e BEOWULF_PORT_9001_TCP_ADDR=10.22.140.67 -e BEOWULF_PORT_9001_TCP_PORT=9001 -w /ShadowWolf/client -p 9000:9000 shadowwolf_dev grunt server
